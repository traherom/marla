/*
 * The maRla Project - Graphical problem solver for statistics and probability problems.
 * Copyright (C) 2010 Cedarville University
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package gui;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * The main frame of the stand-alone application.
 *
 * @author Alex Laird
 */
public class MainFrame extends JFrame
{

	/** The minimum size the window frame is allowed to be.*/
	private final Dimension MINIMUM_WINDOW_SIZE = new Dimension (1000, 540);
    /** The panel that is added to the frame.*/
    private static ViewPanel viewPanel;

    /**
     * Constructs the frame for the stand-alone application.
     */
    public MainFrame()
    {
		// Construct the view panel
        viewPanel = new ViewPanel (this);
		// Add the shutdown hook to ensure saving prior to a close
        Runtime.getRuntime ().addShutdownHook (new Thread ()
        {
            @Override
            public void run()
            {
                viewPanel.quit (false);
            }
        });

		// Add the view to the frame
        add (viewPanel);

		// Initialize frame components
        initComponents ();
        initMyComponents ();
    }

    /**
     * Initializes the frame for the stand-alone application.
     */
    private void initMyComponents()
    {
		// Set the minimum size a user can adjust the frame to
        setMinimumSize (MINIMUM_WINDOW_SIZE);
		// Set the location of the frame to the center of the screen
        setLocationRelativeTo (null);
		// Set the title of the frame, displaying the version number only if we're in pre-release
		setTitle (getDefaultTitle ());

		// Add window listeners to ensure proper saving, sizing, and orientation is done when needed
        addWindowListener (new WindowListener ()
        {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e)
            {
                viewPanel.quit (true);
            }

            @Override
            public void windowClosed(WindowEvent e) {}

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newProblemMenuItem = new javax.swing.JMenuItem();
        openProblemMenuItem = new javax.swing.JMenuItem();
        closeProblemMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        fileSeparator1 = new javax.swing.JPopupMenu.Separator();
        exportToPdfMenuItem = new javax.swing.JMenuItem();
        exportForLatexMenuItem = new javax.swing.JMenuItem();
        fileSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        editSeparator1 = new javax.swing.JPopupMenu.Separator();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        editSeparator2 = new javax.swing.JPopupMenu.Separator();
        selectAllMenuItem = new javax.swing.JMenuItem();
        problemMenu = new javax.swing.JMenu();
        editQuestionMenuItem = new javax.swing.JMenuItem();
        setSelectionAsAnswerMenuItem = new javax.swing.JMenuItem();
        solveMenuItem = new javax.swing.JMenuItem();
        problemSeparator1 = new javax.swing.JPopupMenu.Separator();
        newDataSetMenuItem = new javax.swing.JMenuItem();
        editDataSetMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        viewRCodeMenuItem = new javax.swing.JMenuItem();
        viewLatexCodeMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpContentsMenuItem = new javax.swing.JMenuItem();
        helpSeparator1 = new javax.swing.JPopupMenu.Separator();
        checkForUpdatesMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Verdana", 0, 12));
        fileMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                fileMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        newProblemMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newProblemMenuItem.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        newProblemMenuItem.setText("New Problem...");
        newProblemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProblemMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newProblemMenuItem);

        openProblemMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openProblemMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        openProblemMenuItem.setText("Open Problem...");
        openProblemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProblemMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openProblemMenuItem);

        closeProblemMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeProblemMenuItem.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        closeProblemMenuItem.setText("Close Problem");
        closeProblemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProblemMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeProblemMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        saveAsMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        saveAsMenuItem.setText("Save As...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(fileSeparator1);

        exportToPdfMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        exportToPdfMenuItem.setText("Export to PDF...");
        fileMenu.add(exportToPdfMenuItem);

        exportForLatexMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        exportForLatexMenuItem.setText("Export for LaTeX...");
        fileMenu.add(exportForLatexMenuItem);
        fileMenu.add(fileSeparator2);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.setFont(new java.awt.Font("Verdana", 0, 12));
        editMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                editMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        undoMenuItem.setText("Undo");
        editMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        redoMenuItem.setText("Redo");
        editMenu.add(redoMenuItem);
        editMenu.add(editSeparator1);

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        deleteMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);
        editMenu.add(editSeparator2);

        selectAllMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAllMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        selectAllMenuItem.setText("Select All");
        editMenu.add(selectAllMenuItem);

        menuBar.add(editMenu);

        problemMenu.setText("Problem");
        problemMenu.setFont(new java.awt.Font("Verdana", 0, 12));
        problemMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                problemMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        editQuestionMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        editQuestionMenuItem.setText("Edit Question");
        problemMenu.add(editQuestionMenuItem);

        setSelectionAsAnswerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        setSelectionAsAnswerMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        setSelectionAsAnswerMenuItem.setText("Set Selection as Answer");
        problemMenu.add(setSelectionAsAnswerMenuItem);

        solveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        solveMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        solveMenuItem.setText("Solve");
        solveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveMenuItemActionPerformed(evt);
            }
        });
        problemMenu.add(solveMenuItem);
        problemMenu.add(problemSeparator1);

        newDataSetMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        newDataSetMenuItem.setText("New Data Set...");
        problemMenu.add(newDataSetMenuItem);

        editDataSetMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        editDataSetMenuItem.setText("Edit Data Set...");
        problemMenu.add(editDataSetMenuItem);

        menuBar.add(problemMenu);

        toolsMenu.setText("Tools");
        toolsMenu.setFont(new java.awt.Font("Verdana", 0, 12));
        toolsMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                toolsMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        viewRCodeMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        viewRCodeMenuItem.setText("View R Code");
        toolsMenu.add(viewRCodeMenuItem);

        viewLatexCodeMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        viewLatexCodeMenuItem.setText("View LaTeX Code");
        toolsMenu.add(viewLatexCodeMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Verdana", 0, 12));

        helpContentsMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        helpContentsMenuItem.setText("Help Contents");
        helpMenu.add(helpContentsMenuItem);
        helpMenu.add(helpSeparator1);

        checkForUpdatesMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        checkForUpdatesMenuItem.setText("Check for Updates");
        helpMenu.add(checkForUpdatesMenuItem);

        aboutMenuItem.setFont(new java.awt.Font("Verdana", 0, 12));
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
	{//GEN-HEADEREND:event_exitMenuItemActionPerformed
		viewPanel.quit (true);
	}//GEN-LAST:event_exitMenuItemActionPerformed

	private void solveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveMenuItemActionPerformed
		viewPanel.solve ();
	}//GEN-LAST:event_solveMenuItemActionPerformed

	private void newProblemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProblemMenuItemActionPerformed
		viewPanel.launchNewProblemWizard ();
	}//GEN-LAST:event_newProblemMenuItemActionPerformed

	private void openProblemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProblemMenuItemActionPerformed
		viewPanel.domain.load ();
	}//GEN-LAST:event_openProblemMenuItemActionPerformed

	private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
		viewPanel.domain.save ();
	}//GEN-LAST:event_saveMenuItemActionPerformed

	private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
		viewPanel.domain.saveAs ();
	}//GEN-LAST:event_saveAsMenuItemActionPerformed

	private void fileMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_fileMenuMenuSelected
		if (viewPanel.domain.problem != null)
		{
			closeProblemMenuItem.setEnabled (true);
			saveAsMenuItem.setEnabled (true);
			exportForLatexMenuItem.setEnabled (true);
			exportToPdfMenuItem.setEnabled (true);
			if (viewPanel.domain.problem.isChanged())
			{
				saveMenuItem.setEnabled (true);
			}
			else
			{
				saveMenuItem.setEnabled (false);
			}
		}
		else
		{
			closeProblemMenuItem.setEnabled (false);
			saveMenuItem.setEnabled (false);
			saveAsMenuItem.setEnabled (false);
			exportForLatexMenuItem.setEnabled (false);
			exportToPdfMenuItem.setEnabled (false);
		}
	}//GEN-LAST:event_fileMenuMenuSelected

	private void editMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_editMenuMenuSelected
		if (viewPanel.domain.problem != null)
		{
			undoMenuItem.setEnabled (true);
			redoMenuItem.setEnabled (true);
			cutMenuItem.setEnabled (true);
			copyMenuItem.setEnabled (true);
			pasteMenuItem.setEnabled (true);
			deleteMenuItem.setEnabled (true);
			selectAllMenuItem.setEnabled (true);
		}
		else
		{
			undoMenuItem.setEnabled (false);
			redoMenuItem.setEnabled (false);
			cutMenuItem.setEnabled (false);
			copyMenuItem.setEnabled (false);
			pasteMenuItem.setEnabled (false);
			deleteMenuItem.setEnabled (false);
			selectAllMenuItem.setEnabled (false);
		}
	}//GEN-LAST:event_editMenuMenuSelected

	private void problemMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_problemMenuMenuSelected
		if (viewPanel.domain.problem != null)
		{
			editQuestionMenuItem.setEnabled (true);
			setSelectionAsAnswerMenuItem.setEnabled (true);
			solveMenuItem.setEnabled (true);
			newDataSetMenuItem.setEnabled (true);
			editDataSetMenuItem.setEnabled (true);
		}
		else
		{
			editQuestionMenuItem.setEnabled (false);
			setSelectionAsAnswerMenuItem.setEnabled (false);
			solveMenuItem.setEnabled (false);
			newDataSetMenuItem.setEnabled (false);
			editDataSetMenuItem.setEnabled (false);
		}
	}//GEN-LAST:event_problemMenuMenuSelected

	private void toolsMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_toolsMenuMenuSelected
		if (viewPanel.domain.problem != null)
		{
			viewRCodeMenuItem.setEnabled (true);
			viewLatexCodeMenuItem.setEnabled (true);
		}
		else
		{
			viewRCodeMenuItem.setEnabled (false);
			viewLatexCodeMenuItem.setEnabled (false);
		}
	}//GEN-LAST:event_toolsMenuMenuSelected

	private void closeProblemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProblemMenuItemActionPerformed
		viewPanel.closeProblem();
	}//GEN-LAST:event_closeProblemMenuItemActionPerformed

	/**
	 * Retrieves the default title, which is the program name with it's version number.
	 *
	 * @return The default title of the application.
	 */
	protected String getDefaultTitle()
	{
		String title = Domain.NAME;
		if (!Domain.PRE_RELEASE.equals (""))
		{
			title += " " + Domain.VERSION + " " + Domain.PRE_RELEASE;
		}
		return title;
	}

    /**
     * The method responsible for constructing the visual frame and maintaining
     * the thread as long as the frame is open.
     *
     * @param args The command-line arguments.
     */
    public static void main(String args[])
    {
        // Define UI characteristics before the applicaiton is instantiated
        try
        {
            UIManager.setLookAndFeel (UIManager.getCrossPlatformLookAndFeelClassName ());
        }
        catch (ClassNotFoundException ex)
        {
            Domain.logger.add (ex);
        }
        catch (InstantiationException ex)
        {
            Domain.logger.add (ex);
        }
        catch (IllegalAccessException ex)
        {
            Domain.logger.add (ex);
        }
        catch (UnsupportedLookAndFeelException ex)
        {
            Domain.logger.add (ex);
        }

        EventQueue.invokeLater (new Runnable ()
        {
            @Override
            public void run()
            {
				try
				{
					new MainFrame ().setVisible (true);
				}
				catch (Exception ex)
				{
					Domain.logger.add (ex);
				}
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem checkForUpdatesMenuItem;
    private javax.swing.JMenuItem closeProblemMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem editDataSetMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem editQuestionMenuItem;
    private javax.swing.JPopupMenu.Separator editSeparator1;
    private javax.swing.JPopupMenu.Separator editSeparator2;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportForLatexMenuItem;
    private javax.swing.JMenuItem exportToPdfMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileSeparator1;
    private javax.swing.JPopupMenu.Separator fileSeparator2;
    private javax.swing.JMenuItem helpContentsMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu.Separator helpSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newDataSetMenuItem;
    private javax.swing.JMenuItem newProblemMenuItem;
    private javax.swing.JMenuItem openProblemMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenu problemMenu;
    private javax.swing.JPopupMenu.Separator problemSeparator1;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem selectAllMenuItem;
    private javax.swing.JMenuItem setSelectionAsAnswerMenuItem;
    private javax.swing.JMenuItem solveMenuItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JMenuItem viewLatexCodeMenuItem;
    private javax.swing.JMenuItem viewRCodeMenuItem;
    // End of variables declaration//GEN-END:variables

}
