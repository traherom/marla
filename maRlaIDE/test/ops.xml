<?xml version="1.0" encoding="UTF-8"?>
<operations>
  <operation name="NOP" list="false">
    <!-- This operation is used for testing. It does nothing except print
			that it was encountered -->
    <computation>
      <cmd>print("NOP happened")</cmd>
    </computation>
  </operation>
  <operation name="Histogram">
    <category>Descriptive Graphics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      hist(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>hist(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Boxplot">
    <category>Descriptive Graphics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      boxplot(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>boxplot(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Boxplot ANOVA">
    <category>ANOVA</category>
    <category>Descriptive Graphics</category>
    <query type="column" name="col1" prompt="x:" column-type="numeric" />
    <query type="column" name="col2" prompt="y:" column-type="numeric" />
    <displayname>
      boxplot(
      <response name="col1" />
      ~
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <plot>
        <cmd>boxplot(col1~col2)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Q-Q Norm">
    <category>Descriptive Graphics</category>
    <category>ANOVA</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      qqnorm(
      <response name="col" />
      )
    </displayname>
    <description>Creates a QQ normality plot to help determine if the selected
			data column is normal.</description>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>qqnorm(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Q-Q Line">
    <category>Descriptive Graphics</category>
    <category>ANOVA</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      qqline(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>qqnorm(col)</cmd>
        <cmd>qqline(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Q-Q Plot">
    <category>Descriptive Graphics</category>
    <category>Simple Linear Regression</category>
    <category>ANOVA</category>
    <query type="column" name="col1" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="col2" prompt="Column 2:" column-type="numeric" />
    <displayname>
      qqplot(
      <response name="col1" />
      ,
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <plot>
        <cmd>qqplot(col1, col2)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Barplot">
    <category>Descriptive Graphics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      barplot(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>barplot(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Stem and leaf">
    <category>Descriptive Graphics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      barplot(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>barplot(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Dot Chart">
    <category>Descriptive Graphics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      dotchart(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>dotchart(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Strip Chart">
    <category>Descriptive Graphics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      stripchart(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <plot>
        <cmd>stripchart(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Divide">
    <category>Linear Data Transformation</category>
    <query type="numeric" name="val" prompt="Divide by:" />
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      <response name="col" />
      /
      <response name="val" />
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set name="val" />
      <save type="numeric">col / val</save>
    </computation>
  </operation>
  <operation name="Multiply">
    <category>Linear Data Transformation</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <query type="numeric" name="val" prompt="Multiply by:" />
    <displayname>
      <response name="col" />
      *
      <response name="val" />
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set name="val" />
      <save type="numeric">col * val</save>
    </computation>
  </operation>
  <operation name="Add">
    <category>Linear Data Transformation</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <query type="numeric" name="val" prompt="Add:" />
    <displayname>
      <response name="col" />
      +
      <response name="val" />
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set name="val" />
      <save type="numeric">col + val</save>
    </computation>
  </operation>
  <operation name="Add Columns">
    <category>Linear Data Transformation</category>
    <query type="column" name="col1" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="col2" prompt="Column 2:" column-type="numeric" />
    <displayname>
      <response name="col1" />
      +
      <response name="col2" />
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <save type="numeric">col1 + col2</save>
    </computation>
  </operation>
  <operation name="Subtract Columns">
    <category>Linear Data Transformation</category>
    <query type="column" name="col1" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="col2" prompt="Column 2:" column-type="numeric" />
    <displayname>
      <response name="col1" />
      -
      <response name="col2" />
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <save type="numeric">col1 - col2</save>
    </computation>
  </operation>
  <operation name="Multiply Columns">
    <category>Linear Data Transformation</category>
    <query type="column" name="col1" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="col2" prompt="Column 2:" column-type="numeric" />
    <displayname>
      <response name="col1" />
      *
      <response name="col2" />
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <save type="numeric">col1 * col2</save>

    </computation>
  </operation>
  <operation name="Divide Columns">
    <category>Linear Data Transformation</category>
    <query type="column" name="col1" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="col2" prompt="Column 2:" column-type="numeric" />
    <displayname>
      <response name="col1" />
      /
      <response name="col2" />
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <save type="numeric">col1 / col2</save>
    </computation>
  </operation>
  <operation name="Subtract">
    <category>Linear Data Transformation</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <query type="numeric" name="val" prompt="Subtract:" />
    <displayname>
      <response name="col" />
      -
      <response name="val" />
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set name="val" />
      <save type="numeric">col - val</save>
    </computation>
  </operation>
  <operation name="Exponentiate">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <query type="numeric" name="val" prompt="Raise by:" />
    <displayname>
      <response name="col" />
      &lt;sup&gt;
      <response name="val" />
      &lt;/sup&gt;
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set name="val" />
      <save type="numeric">col ^ val</save>
    </computation>
  </operation>
  <operation name="Exponentiate 2">
    <category>Non-Linear Transformations</category>
    <query type="numeric" name="val" prompt="Value:" />
    <query type="column" name="col" prompt="Raise to:" column-type="numeric" />
    <displayname>
      <response name="val" />
      &lt;sup&gt;
      <response name="col" />
      &lt;/sup&gt;
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set name="val" />
      <save type="numeric">val ^ col</save>
    </computation>
  </operation>
  <operation name="sin()">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      sin(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">sin(col)</save>
    </computation>
  </operation>
  <operation name="cos()">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      cos(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">cos(col)</save>
    </computation>
  </operation>
  <operation name="tan()">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      tan(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">tan(col)</save>
    </computation>
  </operation>
  <operation name="asin()">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      asin(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">asin(col)</save>
    </computation>
  </operation>
  <operation name="acos()">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      acos(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">acos(col)</save>
    </computation>
  </operation>
  <operation name="atan()">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      atan(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">atan(col)</save>
    </computation>
  </operation>
  <operation name="Natural Log">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      ln(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">log(col)</save>
    </computation>
  </operation>
  <operation name="Square Root">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      sqrt(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">sqrt(col)</save>
    </computation>
  </operation>
  <operation name="1-Var variance">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      var(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">var(col)</save>
    </computation>
  </operation>
  <operation name="2-Var variance">
    <category>Descriptive Statistics</category>
    <query type="column" name="col1" prompt="X:" column-type="numeric" />
    <query type="column" name="col2" prompt="Y:" column-type="numeric" />
    <displayname>
      var(
      <response name="col1" />
      ,
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <save type="numeric">var(col1, col2)</save>
    </computation>
  </operation>
  <operation name="Variance">
    <category>Descriptive Statistics</category>
    <query type="column" name="col1" prompt="X:" column-type="numeric" />
    <query type="column" name="col2" prompt="Y:" column-type="numeric" />
    <displayname>
      var(
      <response name="col1" />
      ,
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <save type="numeric">var(col1, col2)</save>
    </computation>
  </operation>
  <operation name="Log base 10">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      log&lt;sub&gt;10&lt;/sub&gt;
      <response name="col" />
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">log10(col)</save>
    </computation>
  </operation>
  <operation name="Log base X">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <query type="numeric" name="base" prompt="Base" />
    <displayname>
      log&lt;sub&gt;
      <response name="base" />
      &lt;/sub&gt;
      <response name="col" />
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set name="base" />
      <save type="numeric">log(col) / log(base)</save>
    </computation>
  </operation>
  <operation name="Exponential">
    <category>Non-Linear Transformations</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      e&lt;sup&gt;
      <response name="col" />
      &lt;/sup&gt;
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">exp(col)</save>
    </computation>
  </operation>

  <operation name="Absolute Value">
    <category>Linear Data Transformation</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      abs(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">abs(col)</save>
    </computation>
  </operation>
  <operation name="One-sample Wilcox">
    <category>One Sample Test</category>
    <query type="column" column-type="numeric" prompt="Column:" name="col" />
    <query type="checkbox" prompt="Assume data is normal" name="normal" />
    <displayname>
      wilcox.test(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set rvar="colName" name="col" use="name" />
      <set rvar="colVals" name="col" use="values" />
      <cmd>w = wilcox.test(colVals)</cmd>
      <!-- Create a "t-test vals" column, if it doesn't already exist -->
      <if colexists="Wilcox">
        <else>
          <save type="string" column="Wilcox">c("estimate", "parameter", "P-Value", "Mean", "Lower CI", "Upper CI", "Alpha")</save>
        </else>
      </if>
      <save type="numeric">w$statistic</save>
      <save type="numeric">w$parameter</save>
      <save type="numeric">w$p.value</save>
      <save type="numeric">w$estimate</save>
      <save type="numeric">w$conf.int[1]</save>
      <save type="numeric">w$conf.int[2]</save>
      <save type="numeric">attr(w$conf.int, 'conf.level')</save>
    </computation>
  </operation>
  <operation name="One-sample t-test">
    <category>One Sample Test</category>
    <query type="column" column-type="numeric" prompt="Column:" name="col" />
    <query type="checkbox" prompt="Assume data is normal" name="normal" />
    <displayname>
      t.test(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set rvar="colName" name="col" use="name" />
      <set rvar="colVals" name="col" use="values" />
      <cmd>t = t.test(colVals)</cmd>
      <!-- Create a "t-test vals" column, if it doesn't already exist -->
      <if colexists="t-test">
        <else>
          <save type="string" column="t-test">c("estimate", "parameter", "P-Value", "Mean", "Lower CI", "Upper CI", "Alpha")</save>
        </else>
      </if>
      <save type="numeric">t$statistic</save>
      <save type="numeric">t$parameter</save>
      <save type="numeric">t$p.value</save>
      <save type="numeric">t$estimate</save>
      <save type="numeric">t$conf.int[1]</save>
      <save type="numeric">t$conf.int[2]</save>
      <save type="numeric">attr(t$conf.int, 'conf.level')</save>
    </computation>
  </operation>
  <operation name="Two Sample Wilcox">
    <category>Two Sample Test</category>
    <query type="column" column-type="numeric" prompt="Column 1:" name="x" />
    <query type="column" column-type="numeric" prompt="Column 2:" name="y" />
    <query type="checkbox" prompt="Assume data is normal" name="normal" />
    <query type="checkbox" prompt="Paired?" name="paired" />
    <displayname>
      wilcox.test(
      <response name="x" />
      ,
			y=
      <response name="y" />
      )
    </displayname>
    <computation>
      <set rvar="xName" name="x" use="name" />
      <set rvar="xVals" name="x" use="values" />
      <set rvar="yName" name="y" use="name" />
      <set rvar="yVals" name="y" use="values" />
      <set name="paired" />
      <cmd>w = wilcox.test(xVals, y=yVals, paired=paired)</cmd>
      <!-- Create a "t-test vals" column, if it doesn't already exist -->
      <if colexists="Wilcox">
        <else>
          <save type="string" column="Wilcox">c("W statistic", "df", "P-Value", "Mean of x", "Mean of y", "Lower CI", "Upper CI", "Alpha")</save>
        </else>
      </if>
      <save type="numeric">w$statistic</save>
      <save type="numeric">w$parameter</save>
      <save type="numeric">w$p.value</save>
      <save type="numeric">w$estimate</save>
      <save type="numeric">w$conf.int[1]</save>
      <save type="numeric">w$conf.int[2]</save>
      <save type="numeric">attr(w$conf.int, 'conf.level')</save>
    </computation>
  </operation>
  <operation name="Mean">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      mean(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">mean(col)</save>
    </computation>
  </operation>
  <operation name="StdDev">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      σ(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">sd(col)</save>
    </computation>
  </operation>
  <operation name="Sum">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      sum(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">sum(col)</save>
    </computation>
  </operation>
  <operation name="Summary">
    <category>Descriptive Statistics</category>
    <query type="column" prompt="Column:" name="col" />
    <displayname>
      summary(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set rvar="colName" name="col" use="name" />
      <set rvar="colVals" name="col" use="values" />
      <!-- Get the summary of the column and then display whatever summary() tells us about it. Generically written -->
      <cmd>s = summary(colVals)</cmd>
      <cmd>n = names(s)</cmd>
      <loop type="numeric" loop-var="s" index-var="i">
        <save type="string">n[i]</save>
        <save r-column="paste('summary(', colName, ')', ' vals', sep='')">s[i]</save>
      </loop>
    </computation>
  </operation>
  <operation name="Stem">
    <category>Descriptive Graphics</category>
    <query type="column" prompt="Column:" name="col" />
    <displayname>
      stem(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <fake-plot>stem(col)</fake-plot>
    </computation>
  </operation>
  <operation name="Linear Model">
    <category>ANOVA</category>
    <category>Simple Linear Regression</category>
    <query type="column" prompt="Column x:" name="col1" />
    <query type="column" prompt="Column y:" name="col2" />
    <displayname>
      lm(
      <response name="col1" />
      ~
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set rvar="xName" name="col1" use="name" />
      <set rvar="xVals" name="col1" use="values" />
      <set rvar="yName" name="col2" use="name" />
      <set rvar="yVals" name="col2" use="values" />
      <cmd>s = lm(xVals~yVals)</cmd>
      <cmd>n = names(s)</cmd>
      <loop type="numeric" loop-var="s" index-var="i">
        <save type="string">n[i]</save>
        <save r-column="paste('lm(', xName, '~', yName, ')', ' vals', sep='')">s[i]</save>
      </loop>
    </computation>
  </operation>
  <operation name="Kruskal">
    <category>ANOVA</category>
    <query type="column" prompt="Column x:" name="col1" />
    <query type="column" prompt="Column y:" name="col2" />
    <displayname>
      kruskal.test(
      <response name="col1" />
      ~
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set rvar="xName" name="col1" use="name" />
      <set rvar="xVals" name="col1" use="values" />
      <set rvar="yName" name="col2" use="name" />
      <set rvar="yVals" name="col2" use="values" />
      <cmd>s = kruskal.test(xVals~yVals)</cmd>
      <cmd>n = names(s)</cmd>
      <loop type="numeric" loop-var="s" index-var="i">
        <save type="string">n[i]</save>
        <save r-column="paste('kruskal.test(', xName, '~', yName, ')', ' vals', sep='')">s[i]</save>
      </loop>
    </computation>
  </operation>
  <operation name="Bartlett">
    <category>ANOVA</category>
    <query type="column" prompt="Column x:" name="col1" />
    <query type="column" prompt="Column y:" name="col2" />
    <displayname>
      bartlett.test(
      <response name="col1" />
      ~
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set rvar="xName" name="col1" use="name" />
      <set rvar="xVals" name="col1" use="values" />
      <set rvar="yName" name="col2" use="name" />
      <set rvar="yVals" name="col2" use="values" />
      <cmd>s = bartlett.test(xVals~yVals)</cmd>
      <cmd>n = names(s)</cmd>
      <loop type="numeric" loop-var="s" index-var="i">
        <save type="string">n[i]</save>
        <save r-column="paste('bartlett.test(', xName, '~', yName, ')', ' vals', sep='')">s[i]</save>
      </loop>
    </computation>
  </operation>
  <operation name="Summary of Linear Model">
    <category>Simple Linear Regression</category>
    <query type="column" prompt="Column x:" name="x" />
    <query type="column" prompt="Column y:" name="y" />
    <displayname>
      summary(lm(
      <response name="x" />
      ~
      <response name="y" />
      ))
    </displayname>
    <computation>
      <set rvar="xName" name="x" use="name" />
      <set rvar="xVals" name="x" use="values" />
      <set rvar="yName" name="y" use="name" />
      <set rvar="yVals" name="y" use="values" />
      <cmd>s = summary(lm(xVals~yVals))</cmd>
      <cmd>n = names(s)</cmd>
      <loop type="numeric" loop-var="s" index-var="i">
        <save type="string">n[i]</save>
        <save r-column="paste('summary(lm(', xName, '~', yName, '))', ' vals', sep='')">s[i]</save>
      </loop>
    </computation>
  </operation>
  <operation name="Five Nums">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      fivenum(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" rvar="colName" use="name" />
      <set name="col" rvar="colVals" use="values" />
      <cmd>a = fivenum(colVals)</cmd>
      <!-- Create a "fivenums" column, if it doesn't already exist -->
      <if colexists="fivenum">
        <else>
          <save type="string" column="fivenum">c("Min", "Lower Hinge", "Median", "Upper Hinge", "Max")</save>
        </else>
      </if>
      <save type="numeric">a[1]</save>
      <save type="numeric">a[2]</save>
      <save type="numeric">a[3]</save>
      <save type="numeric">a[4]</save>
      <save type="numeric">a[5]</save>
    </computation>
  </operation>
  <operation name="rnorm">
    <category>Data Creation</category>
    <query type="numeric" name="samples" prompt="Sample count:" />
    <query type="numeric" name="mean" prompt="Mean:" />
    <displayname>
      rnorm(
      <response name="samples" />
      , mean=
      <response name="mean" />
      )
    </displayname>
    <computation>
      <set name="samples" rvar="n" />
      <set name="mean" rvar="m" />
      <save type="numeric">rnorm(n, m)</save>
    </computation>
  </operation>
  <operation name="Binomial Test">
    <category>Statistical Test</category>
    <category>One Sample Test</category>
    <query type="numeric" name="successes" prompt="Success count:" />
    <query type="numeric" name="trials" prompt="Trial count:" />
    <query type="numeric" name="alpha" prompt="Alpha:" min="0" max="1" />
    <displayname>
      binom.test(
      <response name="successes" />
      ,
      <response name="trials" />
      )
    </displayname>
    <computation>
      <set name="successes" />
      <set name="trials" />
      <set name="alpha" />
      <!-- check arguments -->
      <if expr="trials &lt; successes">
        <then>
          <error msg="Trials must be greater than successes" />
        </then>
      </if>
      <cmd>res = binom.test(floor(successes), floor(trials), conf.level=1-alpha)</cmd>
      <save type="numeric">res$estimate</save>
    </computation>
  </operation>
  <operation name="Proportionality Test">
    <category>Statistical Test</category>
    <category>One Sample Test</category>
    <query type="column" name="successes" prompt="Sucess counts:" column-type="numeric" />
    <query type="column" name="trials" prompt="Trial counts:" column-type="numeric" />
    <query type="numeric" name="alpha" prompt="Alpha:" min="0" max="1" />
    <displayname>
      prop.test(
      <response name="successes" />
      ,
      <response name="trials" />
      )
    </displayname>
    <computation>
      <set name="successes" use="values" />
      <set name="trials" use="values" />
      <set name="alpha" />
      <cmd>res = prop.test(floor(successes), floor(trials), conf.level=1-alpha)</cmd>
      <save type="numeric">res$estimate</save>
    </computation>
  </operation>
  <operation name="Correlation Test">
    <category>Two Sample Test</category>
    <query type="column" name="col1" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="col2" prompt="Column 2:" column-type="numeric" />
    <query type="numeric" name="alpha" prompt="Alpha:" min="0" max="1" />
    <displayname>
      cor.test(
      <response name="col1" />
      ,
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <set name="alpha" />
      <cmd>res = cor.test(col1, col2, conf.level=1-alpha)</cmd>
      <save type="numeric">res$estimate</save>
    </computation>
  </operation>
  <operation name="Variance Test">
    <category>Two Sample Test</category>
    <query type="column" name="col1" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="col2" prompt="Column 2:" column-type="numeric" />
    <query type="numeric" name="alpha" prompt="Alpha:" min="0" max="1" />
    <displayname>
      var.test(
      <response name="col1" />
      ,
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <set name="alpha" />
      <cmd>res = var.test(col1, col2, conf.level=1-alpha)</cmd>
      <save type="numeric">res$estimate</save>
    </computation>
  </operation>
  <operation name="Shapiro-Wilk Normality Test">
    <category>ANOVA</category>
    <category>Simple Linear Regression</category>
    <category>One Sample Test</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      shapiro.test(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <cmd>res = shapiro.test(col)</cmd>
      <save type="numeric">res$statistic</save>
    </computation>
  </operation>
  <operation name="ANOVA">
    <category>ANOVA</category>
    <query type="column" name="col1" prompt="x:" />
    <query type="column" name="col2" prompt="y:" />
    <displayname>
      anova(lm(
      <response name="col1" />
      ~
      <response name="col2" />
      ))
    </displayname>
    <computation>
      <!-- Descriptive column -->
      <set name="col1" rvar="xName" use="name" />
      <set name="col2" rvar="yName" use="name" />
      <cmd>cols = c(xName, yName)</cmd>
      <cmd>descCol = "ANOVA"</cmd>
      <save type="string" r-column="descCol">paste('Deg. Freedom', cols)</save>
      <save type="string" r-column="descCol">paste('Sum of Squares', cols)</save>
      <save type="string" r-column="descCol">paste('Mean of Squares', cols)</save>
      <save type="string" r-column="descCol">'F'</save>
      <save type="string" r-column="descCol">'P value'</save>
      <!-- Compute -->
      <set name="col1" use="values" />
      <set name="col2" use="values" />
      <cmd>res = anova(lm(col1~col2))</cmd>
      <!-- Save results -->
      <save type="numeric">res$Df</save>
      <save type="numeric">res$Sum</save>
      <save type="numeric">res$Mean</save>
      <save type="numeric">res$F</save>
      <save type="numeric">res$Pr</save>
    </computation>
  </operation>
  <operation name="Power T-Test" list="false">
    <category>Two Sample Test</category>
    <query type="column" name="x" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="y" prompt="Column 2:" column-type="numeric" />
    <query type="numeric" name="alpha" prompt="Alpha:" min="0" max="1" />
    <displayname>
      cor.test(
      <response name="x" />
      ,
      <response name="y" />
      )
    </displayname>
    <computation>
      <error msg="Power T-Test: To be done" />
    </computation>
  </operation>
  <operation name="Power Prop Test" list="false">
    <category>Statistical Test</category>
    <query type="column" name="x" prompt="Column 1:" column-type="numeric" />
    <query type="column" name="y" prompt="Column 2:" column-type="numeric" />
    <query type="numeric" name="alpha" prompt="Alpha:" min="0" max="1" />
    <displayname>
      cor.test(
      <response name="x" />
      ,
      <response name="y" />
      )
    </displayname>
    <computation>
      <error msg="Power Prop Test: To be done" />
    </computation>
  </operation>
  <operation name="XY Plot">
    <category>Descriptive Graphics</category>
    <category>Simple Linear Regression</category>
    <query type="column" name="col1" prompt="X column:" column-type="numeric" />
    <query type="column" name="col2" prompt="Y column:" column-type="numeric" />
    <displayname>
      plot(
      <response name="col1" />
      ,
      <response name="col2" />
      )
    </displayname>
    <computation>
      <set name="col1" />
      <set name="col2" />
      <plot>
        <cmd>plot(col1, col2)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Single Var Plot">
    <category>Descriptive Graphics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      plot(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" />
      <plot>
        <cmd>plot(col)</cmd>
      </plot>
    </computation>
  </operation>
  <operation name="Sequence">
    <category>Data Creation</category>
    <query type="numeric" name="start" prompt="From:" />
    <query type="numeric" name="end" prompt="To:" />
    <displayname>
      seq(
      <response name="start" />
      ,
      <response name="end" />
      )
    </displayname>
    <computation>
      <set name="start" />
      <set name="end" />
      <save type="numeric">seq(start, end)</save>
    </computation>
  </operation>
  <operation name="Repeat">
    <category>Data Creation</category>
    <query type="numeric" name="val" prompt="Value:" />
    <query type="numeric" name="count" prompt="Count:" />
    <displayname>
      rep(
      <response name="val" />
      ,
      <response name="count" />
      )
    </displayname>
    <computation>
      <set name="val" />
      <set name="count" />
      <save type="numeric">rep(val, count)</save>
    </computation>
  </operation>
  <operation name="Median">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      median(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">median(col)</save>
    </computation>
  </operation>
  <operation name="Max">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      max(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">max(col)</save>
    </computation>
  </operation>
  <operation name="Min">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      min(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">min(col)</save>
    </computation>
  </operation>
  <operation name="Sort">
    <category>Linear Data Transformation</category>
    <query type="column" name="col" prompt="Column:" />
    <query type="checkbox" name="desc" prompt="Descending" />
    <displayname>
      sort(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <set rvar="desc" name="desc" />
      <if expr="!desc">
        <then>
          <save>sort(col)</save>
        </then>
        <else>
          <save>sort(col, decreasing=T)</save>
        </else>
      </if>
    </computation>
  </operation>
  <operation name="Reverse">
    <category>Linear Data Transformation</category>
    <query type="column" name="col" prompt="Column:" />
    <displayname>
      rev(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save>rev(col)</save>
    </computation>
  </operation>
  <operation name="Product">
    <category>Descriptive Statistics</category>
    <query type="column" name="col" prompt="Column:" column-type="numeric" />
    <displayname>
      prod(
      <response name="col" />
      )
    </displayname>
    <computation>
      <set name="col" use="values" />
      <save type="numeric">prod(col)</save>
    </computation>
  </operation>
  <operation name="Load library" list="false">
    <description>Loads the named library into R. Will attempt to automatically install if needed.</description>
    <query type="string" name="lib" prompt="Library name:" />
    <displayname>
      Load
      <response name="lib" />
    </displayname>
    <computation>
      <set rvar="lib" name="lib" />
      <load r-library="lib" />
    </computation>
  </operation>
  <operation name="Two Sample t-test">
    <category>Two Sample Test</category>
    <query type="column" column-type="numeric" prompt="Column 1:" name="x" />
    <query type="column" column-type="numeric" prompt="Column 2:" name="y" />
    <query type="checkbox" prompt="Assume data is normal" name="normal" />
    <query type="checkbox" prompt="Paired?" name="paired" />
    <query type="checkbox" prompt="Equal variances?" name="pooled" />
    <displayname>
      t.test(
      <response name="x" />
      ,
			y=
      <response name="y" />
      )
    </displayname>
    <computation>
      <set rvar="xName" name="x" use="name" />
      <set rvar="xVals" name="x" use="values" />
      <set rvar="yName" name="y" use="name" />
      <set rvar="yVals" name="y" use="values" />
      <set name="paired" />
      <set name="pooled" />
      <cmd>t = t.test(xVals, y=yVals, paired=paired, var.equal=pooled)</cmd>
      <!-- Create a "t-test vals" column, if it doesn't already exist -->
      <if colexists="t-test">
        <else>
          <save type="string" column="t-test">c("T statistic", "df", "P-Value", "Mean of x", "Mean of y", "Lower CI", "Upper CI", "Alpha")</save>
        </else>
      </if>
      <save type="numeric">t$statistic</save>
      <save type="numeric">t$parameter</save>
      <save type="numeric">t$p.value</save>
      <save type="numeric">t$estimate</save>
      <save type="numeric">t$conf.int[1]</save>
      <save type="numeric">t$conf.int[2]</save>
      <save type="numeric">attr(t$conf.int, 'conf.level')</save>
    </computation>
  </operation>
</operations>

