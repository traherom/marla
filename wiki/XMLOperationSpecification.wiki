#summary Covers the XML file that specifies operations for maRla
#labels Featured

= Overview =
Operations in maRla may be specified using an XML format. The XML file should be similar
to the following. A full example implementing a t-test is listed at the bottom.

{{{
<?xml version="1.0" encoding="UTF-8" ?>
<operations>
  <operation name="<operation name>">
    <query type="<column|checkbox|string|number|combo>" name="<internal name>" prompt="<User prompt>" />
    <computation>
      <set rvar="<variable name>" name="<internal name>" />
      
      <cmd>R command</cmd>
      ...
      <cmd>R command</cmd>
      
      <loop type="parent|double_array|string_array" [indexVar="<R variable name>"] [keyVar="<R variable name>"] [valueVar="<R variable name>"] [loopVar=""]>
        <cmd>R command</cmd>
        ...
      </loop>
      
      <save type="double|string|double_array|string_array" [column="<Column name>"] [dynamic_column="<R command>"]>[<R command>]</save>
    </computation>
  </operation>
</operations>
}}}

== Operation ==
Each `<operation />` takes a name that will be displayed to the user and can be used to
create that operation. It must be unique. If multiple with the same name exist an
exception will be thrown.

== Queries ==
Inside of an operation there can be multiple `<query />` elements. These queries will be presented
to the user with the given `prompt` when they add the operation. Each query requires a `prompt`,
a `type`, and a `name`. Prompt may be any arbitrary string to display to the user. The type
should be one of `column`, `checkbox`, `string`, `number`, or `combo`.

A column type allows the selection of one of the columns in the parent data set and/or
operation. A combo requires that `<option />`s be specified. For example:
{{{
<query type="combo" name="test_type" prompt="Select the test to perform">
  <option>Two sample</option>
  <option>Paired</option>
</query>
}}}

The user's response will be returned back and saved under the name given. In the computation
section of the operation specification these values can be sent to R to perform work.

== Computaion ==
There then is a `<computation />` section inside the operation. This section allows five types of
elements, all of which may be specified in any number of times. Elements will be executed in the
order they are encountered.

=== Commands ===
The first element type is the simplest, commands. A `<cmd />` takes a single R command and executes
it. An exception will be thrown if more than one command is placed here. If a newline is needed
in a string then use `\n`, not a hard line break.

=== Set ===
Second, a `<set />` element allows for an R variable to be set from one of the user-prompted
values. The attribute `rvar` specifies the R variable name to use and `name` should reference the
same name as was used in the original `<query />`. For example, to ask a user to select a column
and then save it for use:
{{{
<operation>
  <query type="column" name="selected_column" prompt="Select a column" />
  <computation>
    <set rvar="col" name="selected_column" />
  <computation>
</operation>
}}}

=== Loops ===
Third, `<loop />`s allow repetition. Each loop must specify its `type` as either `parent`,
`double_array`, or `string_array`. Parent loops go through every column of the parent data set
and/or operation, assigning them in turn to the R variable given in `valueVar`. Array loops
take the R command given in `loopVar` and iterate over the elements in it, setting each in turn
as the value of valueVar. An `indexVar` may also be specified for any loop type which will
keep an index (1 based) of the loop number. Parent loops may specify a `keyVar`, which will
be assigned the string name of the column they are looping over.

A loop may then use any of the other elements inside itself, including other loops.

=== Save ===
Fourth, to set the actual values for the operation, `<save />` elements may be specified. The
result to save must be a single R command inside the element. The example below illustrates this.
{{{
<comuptation>
  <cmd>testing = 75.6</cmd>
  <save type="double" column="ex">testing</save>
</computation>
}}}

The `type` tells the operation how to process the result and may be one of `double`, `string`,
`double_array`, or `string_array`. The `column` attribute gives the name of the result
column to save into. Instead of plain `column`, `dynamic_column` maybe used, which may
contain any R command that results in a single string.

=== Plots ===
Finally, a single `<plot />` element is allowed in an operation. A plot creates a new
device and commands may be placed inside may draw onto it. Commands should not manually change
the device or close it, that will be taken care of by the plot. A plot takes no attributes
but allows any of the other elements to be place inside it, just as with the main computation
section.

== Example ==
Below is an example of implementing a t-test:
{{{
<operation name="t-test">
	<query type="checkbox" prompt="Is your data normal?" name="normal" />
	<computation>
		<!-- Run t test on each column and save, plus prepare the top row -->
		<cmd>t = list()</cmd>
		<loop type="parent" valueVar="col" nameVar="colName" indexVar="i">
			<cmd>t[[i]] = t.test(col)</cmd>
			<save type="string" column="Column">colName</save>
		</loop>

		<!-- Save each -->
		<loop type="parent" indexVar="i">
			<save type="double" column="t">t[[i]]$statistic</save>
			<save type="double" column="DF">t[[i]]$parameter</save>
			<save type="double" column="P-Value">t[[i]]$p.value</save>
			<save type="double" column="Mean">t[[i]]$estimate</save>
			<save type="double" column="Lower CI">t[[i]]$conf.int[1]</save>
			<save type="double" column="Upper CI">t[[i]]$conf.int[1]</save>
			<save type="double" column="alpha">attr(t[[i]]$conf.int, 'conf.level')</save>
		</loop>
	</computation>
</operation>
}}}

If we have the dataset:
|| "Import.me" || "Column." || "Hello" ||
|| 10 || 20 || 30 ||
|| 11 || 21 || 31 ||
|| 12 || 22 || 32 ||
|| 13 || 23 || 33 ||

The resultant operation does the following internally:
{{{
run:
> t = list()
> colName="Import.me"
> i=1.0
> col = c(10.0, 11.0, 12.0, 13.0 )
> t[[i]] = t.test(col)
> colName
[1] "Import.me"
> colName="Column."
> i=2.0
> col = c(20.0, 21.0, 22.0, 23.0 )
> t[[i]] = t.test(col)
> colName
[1] "Column."
> colName="Hello"
> i=3.0
> col = c(30.0, 31.0, 32.0, 33.0 )
> t[[i]] = t.test(col)
> colName
[1] "Hello"
> i=1.0
> t[[i]]$statistic
       t 
17.81572 
> t[[i]]$parameter
df 
 3 
> t[[i]]$p.value
[1] 0.0003856172
> t[[i]]$estimate
mean of x 
     11.5 
> t[[i]]$conf.int[1]
[1] 9.44574
> t[[i]]$conf.int[2]
[1] 13.55426
> attr(t[[i]]$conf.int, 'conf.level')
[1] 0.95
> i=2.0
> t[[i]]$statistic
       t 
33.30766 
> t[[i]]$parameter
df 
 3 
> t[[i]]$p.value
[1] 5.948823e-05
> t[[i]]$estimate
mean of x 
     21.5 
> t[[i]]$conf.int[1]
[1] 19.44574
> t[[i]]$conf.int[2]
[1] 23.55426
> attr(t[[i]]$conf.int, 'conf.level')
[1] 0.95
> i=3.0
> t[[i]]$statistic
       t 
48.79959 
> t[[i]]$parameter
df 
 3 
> t[[i]]$p.value
[1] 1.894812e-05
> t[[i]]$estimate
mean of x 
     31.5 
> t[[i]]$conf.int[1]
[1] 29.44574
> t[[i]]$conf.int[2]
[1] 33.55426
> attr(t[[i]]$conf.int, 'conf.level')
[1] 0.95
}}}

And the final result is:
|| Column: || t || DF || P-Value || Mean || Lower CI || Upper CI || alpha ||
|| "Import.me" || "Column." || "Hello" ||
|| 17.81572 || 33.30766 || 48.79959 ||
|| 3.0 || 3.0 || 3.0 ||
|| 3.856172E-4 || 5.948823E-5 || 1.894812E-5 ||
|| 11.5 || 21.5 || 31.5 ||
|| 9.44574 || 19.44574 || 29.44574 ||
|| 13.55426 || 23.55426 || 33.55426 ||
|| 0.95 || 0.95 || 0.95 ||

