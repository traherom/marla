#summary Covers the XML file that specifies operations for maRla
#labels Featured
<wiki:toc max_depth="4" />
Operations in maRla may be specified using an XML format. In the discussion below, attributes given in bold are required. A full example implementing a t-test is listed at the bottom.

= Operation =
{{{
<operation name="operation name" [plot="true|false"] [category="category name"] [list="true|false"]>
}}}
Each `<operation />` takes a name that will be displayed to the user and can be used to
create that operation. It must be unique. If multiple with the same name exist an
exception will be thrown. If an operation is going to output a plot, it must have `plot="true"` set as well. If an operation should not appear on the side panel, set `list="false"`.

Attributes supported:
  * *`name`* - Arbitary name of the operation. Must be unique within the XML file
  * `plot` - Specifies if the operation will produce a plot. May be set to `true` or `false`. Default is `false`.
  * `category` - Specifies the category this operation falls under. Arbitrary string.
  * `list` - Specifies if this operation is listed under normal displays. Maybe to set to `true` or `false`. Default is `true`.

== Queries ==
{{{
<query type="column|checkbox|string|numeric|combo" [column_type="all|numeric|string"] name="internal name" prompt="User prompt" />
}}}

Inside of an operation there can be multiple `<query />` elements. These queries will be presented
to the user with the given `prompt` when they add the operation.

Attributes supported:
  * *`name`* - A unique name to identify the query by, may not be used by any other `query` in the operation.
  * *`prompt`* - Any arbitrary string to display to the user.
  * *`type`* - One of the following:
    * `column` - Presents the user with a list of the parent columns. `column_type` must be given to specify which columns to display.
    * `checkbox` - Simple checkbox that the user may select
    * `string` - Arbitrary user-entered string
    * `numeric` - Arbitrary user-entered number
    * `combo` - Operation-specified selectable list. See [XMLOperationSpecification#Combo]
  * `column_type` - One of the following:
    * `all` - All parent columns will be selectable
    * `numeric` - All numeric parent columns
    * `string` - All string parent columns

=== Combo ===
A column type allows the selection of one of the columns in the parent data set and/or
operation. A combo requires that `<option />`s be specified. For example:
{{{
<query type="combo" name="test_type" prompt="Select the test to perform">
  <option>Two sample</option>
  <option>Paired</option>
</query>
}}}

The user's response will be returned back and saved under the name given.

== Dynamic Name ==
{{{
<longname>Specification</longname>
}}}
Operations may have a name which changes based on what it is actually doing. For example, an operation which adds a user-specified value to a given column might be called "Add" but be displayed as "ColName + 5." This behavior is specified by the `<longname />` element.

The main `longname` element takes no attributes. Inside it may have verbatim text--which will be copied as-is--or `<response />` elements. These may be intermixed freely as desired.

An example of the add operation discussed above:
{{{
<operation name="Add">
  <query type="column" name="col" prompt="Column?" />
  <query type="numeric" name="val" prompt="Add" />

  <longname><response name="col" default="Col" /> + <response name="val" default="X" /></longname>

  <computation>
    <!-- ...operations to perform addition... -->
  </computation>
</operation>
}}}

=== Response ===
{{{
<response name="query name" default="default value" />
}}}
The query referenced by `name` will be copied into the location of this element. If the user has not yet provided an answer to the query, the value given in `default` will be used instead.

Supported attributes:
  * *`name`* - Name used for a query (see [XMLOperationSpecification#Queries]). The text to this answer will be copied into the place of this element
  * *`default`* - Default text to use if the query has not been answered yet.

== Computation ==
{{{
<computation>
  <cmd />
  <if />
  <loop />
  <set />
  <copy />
  <error />
  <save />
  <plot />
</computation>
}}}
Inside each operation there must be a `<computation />` element. This section allows five types of elements which may be specified in any number of times and in any order. Elements will be executed in the order they are encountered.

=== Commands ===
{{{
<cmd>R code</cmd>
}}}
The simplest computation element is the command. A `<cmd />` takes a single R command and executes
it. An exception will be thrown if more than one command is placed here. If a newline is needed
in a string then use `\n`, not a hard line break.

=== Set ===
{{{
<set rvar="R variable name" name="query name" [use="name|values"] />
}}}
A `<set />` element allows for an R variable to be set from one of the user-prompted
query values.

Attributes supported:
  * *`rvar`* - Specifies the R variable name to set
  * *`name`* - Name specified for the desired query element (see [XMLOperationSpecification#Queries].
  * `use` - For `column` queries, the R variable may be set with either the string name of the column selected or the actual values in that column. This attribute specifies which processing method to use.
    * `name` - Use the column name
    * `values` - Use the column values

For example, to ask a user to select a column and then save the values for use:
{{{
<operation>
  <query type="column" name="selected_column" prompt="Select a column" />
  <computation>
    <set rvar="col" name="selected_column" use="values" />
  <computation>
</operation>
}}}

=== Loops ===
{{{
<loop type="parent|numeric|string" [index_var="R variable name"] [key_var="R variable name"]    [value_var="R variable name"] [loop_var="R expression"]>
  ...
</loop>
}}}
`<loop />` elements allow repetition over parent data or arbitrary lists. A loop may use any of the other elements inside itself, including other loops.

Attributes supported:
  * *`type`* - One of the following:
    * `parent` - Loop over every column in the parent data
    * `numeric` - Iterate over every element of the vector given by `loop_var`, processing them as numeric values
    * `string` - Iterate over every element of the vector given by `loopVar`, processing them as string values
  * `loop_var` - If using one of the array loop types, this specifies an R statement that generates the vector to loop over
  * `index_var` - Loop number the loop is on (1 based)
  * `key_var` - For parent loops, gives the name of the current column. For array loops it is the same as indexVar
  * `value_var` - For parent loops, gives the values in the current column. For array loops it gives the current value in the array

=== Conditionals ===
{{{
<if type="vartype|expr">
  <then>...</then>
  <else>...</else>
</if>
}}}
Conditional work is supported through the `<if />` element. If the condition specified is true, then commands in a `<then />` block are executed. If it is false, then commands in the `<else />` block are executed. Either block may be left out if not needed.

Supported attributes:
  * *`type`* - One of the following:
    * `vartype` - Switches on the type of an R variable, as deterimed by `str(rvar)`
    * `expr` - Arbitrary R boolean expression will be used for evaluation
  * `rvar` - Used by `vartype`. Gives the R variable which should have its type examined
  * `expected` - Used by `vartype`. Gives the "true" type of the R variable. One of the following:
    * `string` - String or multiple strings of data
    * `numeric` - Number or multiple numbers
  * `expr` - R expression to evaluate. Must evaluate to a single TRUE or FALSE value and be only a single statement

=== Copy ===
{{{
<copy [all="true|false"] [column="column name"] [r_column="R expression"] />
}}}
Copies the give column from the parent into the result for the operation. If `all="true"` is specified, copies all columns from the parent. The copied column will use the same name as the parent. A column with the same name must not already exist, although once the copy is done other elements may modify it.

Supported attributes:
  * *`column`* - Specifies a static name for the column to copy
  * *`r_column`* - Specifies an R expression which returns a string to use as the column to copy
  * `all` - Boolean value which specifies if all parent columns should be copied. Must be `true` or `false`. Defaults to `false`. If given, `column`/`r_column` are ignored.

=== Error ===
{{{
<error msg="Message to display to user" />
}}}
The `error` element allows an operation to stop its own execution and present an error message to the user. For example, an operation might have additional requirements on query answers beyond what could be specified in the `query` element.

Support attributes:
  * *`msg`* - Arbitrary message to present to the user that explains the error

Example:

{{{
<query type="numeric" name="i" prompt="Var 1" />
<query type="numeric" name="j" prompt="Var 2" />

<computation>
  <set name="i" rvar="i" />
  <set name="j" rvar="j" />

  <if type="expr" expr="i &lt;= j">
    <then>
      <error msg="Var 1 must be greater than Var 2" />
    </then>
  </if>
</computation>
}}}

=== Save ===
{{{
<save type="numeric|string" [column="<Column name>"] [r_column="<R command>"]>R command</save>
}}}
To save the final values for the computation, `<save />` elements may be specified. The value saved is given by the single R command inside the save element.

Attributes supported:
  * *`type`* - One of the following
    * `numeric` - Process the result as one or more numeric values
    * `string` - Process the result as one or more string values
  * `column` - Static name of the column to save these values into
  * `r_column` - R command from which to pull the name of the column to save into. Must return a single string

For example:
{{{
<comuptation>
  <cmd>testing = 75.6</cmd>
  <save type="numeric" column="ex">testing</save>
</computation>
}}}

=== Plots ===
{{{
<plot>...</plot>
}}}
A single `<plot />` element is allowed in an operation. A plot creates a new device and commands may be placed inside may draw onto it. Commands should not manually change the device or close it, that will be taken care of by the plot. A plot takes no attributes but allows any of the other elements to be place inside it, just as with the main computation section.

= Example =
Below is an example of implementing a t-test:
{{{
<?xml version="1.0" encoding="UTF-8" ?>
<operations>
  <operation name="t-test">
    <query type="checkbox" prompt="Is your data normal?" name="normal" />
  
    <computation>
      <!-- Run t test on each column and save, plus prepare the top row -->
      <cmd>t = list()</cmd>
      <loop type="parent" valueVar="col" nameVar="colName" indexVar="i">
        <if type="vartype" rvar="col" expected="numeric">
          <then>
            <cmd>t[[i]] = t.test(col)</cmd>
            <save type="string" column="Column">colName</save>
          </then>
        </if>
      </loop>

      <!-- Save each t.test result -->
      <loop type="numeric_array" loopVar="1:length(t)" indexVar="i">
        <save type="numeric" column="t">t[[i]]$statistic</save>
        <save type="numeric" column="DF">t[[i]]$parameter</save>
        <save type="numeric" column="P-Value">t[[i]]$p.value</save>
        <save type="numeric" column="Mean">t[[i]]$estimate</save>
        <save type="numeric" column="Lower CI">t[[i]]$conf.int[1]</save>
        <save type="numeric" column="Upper CI">t[[i]]$conf.int[2]</save>
        <save type="numeric" column="alpha">attr(t[[i]]$conf.int, 'conf.level')</save>
      </loop>
    </computation>
  </operation>
</operations>
}}}

If we have the dataset:
|| "Import.me" || "Column." || "Hello" ||
|| 10 || 20 || 30 ||
|| 11 || 21 || 31 ||
|| 12 || 22 || 32 ||
|| 13 || 23 || 33 ||

The resultant operation does the following internally:
{{{
run:
> t = list()
> colName="Import.me"
> i=1.0
> col = c(10.0, 11.0, 12.0, 13.0 )
> t[[i]] = t.test(col)
> colName
[1] "Import.me"
> colName="Column."
> i=2.0
> col = c(20.0, 21.0, 22.0, 23.0 )
> t[[i]] = t.test(col)
> colName
[1] "Column."
> colName="Hello"
> i=3.0
> col = c(30.0, 31.0, 32.0, 33.0 )
> t[[i]] = t.test(col)
> colName
[1] "Hello"
> i=1.0
> t[[i]]$statistic
       t 
17.81572 
> t[[i]]$parameter
df 
 3 
> t[[i]]$p.value
[1] 0.0003856172
> t[[i]]$estimate
mean of x 
     11.5 
> t[[i]]$conf.int[1]
[1] 9.44574
> t[[i]]$conf.int[2]
[1] 13.55426
> attr(t[[i]]$conf.int, 'conf.level')
[1] 0.95
> i=2.0
> t[[i]]$statistic
       t 
33.30766 
> t[[i]]$parameter
df 
 3 
> t[[i]]$p.value
[1] 5.948823e-05
> t[[i]]$estimate
mean of x 
     21.5 
> t[[i]]$conf.int[1]
[1] 19.44574
> t[[i]]$conf.int[2]
[1] 23.55426
> attr(t[[i]]$conf.int, 'conf.level')
[1] 0.95
> i=3.0
> t[[i]]$statistic
       t 
48.79959 
> t[[i]]$parameter
df 
 3 
> t[[i]]$p.value
[1] 1.894812e-05
> t[[i]]$estimate
mean of x 
     31.5 
> t[[i]]$conf.int[1]
[1] 29.44574
> t[[i]]$conf.int[2]
[1] 33.55426
> attr(t[[i]]$conf.int, 'conf.level')
[1] 0.95
}}}

And the final result is:
|| Column || t || DF || P-Value || Mean || Lower CI || Upper CI || alpha ||
|| "Import.me" || 17.81572 || 3.0 || 3.856172E-4 || 11.5 || 9.44574 || 13.55426 || 0.95 ||
|| "Column." || 33.30766 || 3.0 || 5.948823E-5 || 21.5 || 19.44574 || 23.55426 || 0.95 ||
|| "Hello" || 48.79959 || 3.0 || 1.894812E-5 || 31.5 || 29.44574 || 33.55426 || 0.95 ||