/*
 * The maRla Project - Graphical problem solver for statistics and probability problems.
 * Copyright (C) 2010 Cedarville University
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package gui;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * The main frame of the stand-alone application.
 *
 * @author Alex Laird
 */
public class MainFrame extends JFrame
{
    /** The minimum size the window frame is allowed to be.*/
    private final Dimension MINIMUM_WINDOW_SIZE = new Dimension (1000, 540);
    /** The panel that is added to the frame.*/
    private static ViewPanel viewPanel;

    /**
     * Constructs the frame for the stand-alone application.
     */
    public MainFrame()
    {
	// Construct the view panel
        viewPanel = new ViewPanel (this);
	// Add the shutdown hook to ensure saving prior to a close
        Runtime.getRuntime ().addShutdownHook (new Thread ()
        {
            @Override
            public void run()
            {
                viewPanel.quit (false);
            }
        });

	// Add the view to the frame
        add (viewPanel);

	// Initialize frame components
        initComponents ();
        initMyComponents ();
    }

    /**
     * Initializes the frame for the stand-alone application.
     */
    private void initMyComponents()
    {
	// Set the minimum size a user can adjust the frame to
        setMinimumSize (MINIMUM_WINDOW_SIZE);
	// Set the location of the frame to the center of the screen
        setLocationRelativeTo (null);
	// Set the title of the frame, displaying the version number only if we're in pre-release
	setTitle (Domain.NAME);

	// Add window listeners to ensure proper saving, sizing, and orientation is done when needed
        addWindowListener (new WindowListener ()
        {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e)
            {
                viewPanel.quit (true);
            }

            @Override
            public void windowClosed(WindowEvent e) {}

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The method responsible for constructing the visual frame and maintaining
     * the thread as long as the frame is open.
     *
     * @param args The command-line arguments.
     */
    public static void main(String args[])
    {
        // Define UI characteristics before the applicaiton is instantiated
        try
        {
            UIManager.setLookAndFeel (UIManager.getCrossPlatformLookAndFeelClassName ());
        }
        catch (ClassNotFoundException ex)
        {
            Domain.logger.add (ex);
        }
        catch (InstantiationException ex)
        {
            Domain.logger.add (ex);
        }
        catch (IllegalAccessException ex)
        {
            Domain.logger.add (ex);
        }
        catch (UnsupportedLookAndFeelException ex)
        {
            Domain.logger.add (ex);
        }

        EventQueue.invokeLater (new Runnable ()
        {
            @Override
            public void run()
            {
                try
                {
                        new MainFrame ().setVisible (true);
                }
                catch (Exception ex)
                {
                        Domain.logger.add (ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
